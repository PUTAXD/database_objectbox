// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(4, 3177421360787110936),
      name: 'Author',
      lastPropertyId: const IdUid(2, 1500264102220613556),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 407764125906066049),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1500264102220613556),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(2, 6295126663816057328),
            name: 'books',
            targetId: const IdUid(5, 7774953929481424392))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 7774953929481424392),
      name: 'Book',
      lastPropertyId: const IdUid(2, 8435059430430294212),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4319578013514954694),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8435059430430294212),
            name: 'title',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'authors', srcEntity: 'Author', srcField: 'books')
      ])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(5, 7774953929481424392),
      lastIndexId: const IdUid(1, 613058545714532593),
      lastRelationId: const IdUid(2, 6295126663816057328),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        6352640660728936468,
        3574828563876299317,
        7096350372053755225
      ],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        9081018432638668832,
        8221274557664046442,
        6647221055119307477,
        8272593001349432039,
        6438892843788730293,
        7652370731081122565,
        91899501539240372,
        7353113701977276445,
        7957455773314801493,
        3008947728597098696
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Author: EntityDefinition<Author>(
        model: _entities[0],
        toOneRelations: (Author object) => [],
        toManyRelations: (Author object) =>
            {RelInfo<Author>.toMany(2, object.id): object.books},
        getId: (Author object) => object.id,
        setId: (Author object, int id) {
          object.id = id;
        },
        objectToFB: (Author object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Author(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));
          InternalToManyAccess.setRelInfo(object.books, store,
              RelInfo<Author>.toMany(2, object.id), store.box<Author>());
          return object;
        }),
    Book: EntityDefinition<Book>(
        model: _entities[1],
        toOneRelations: (Book object) => [],
        toManyRelations: (Book object) =>
            {RelInfo<Author>.toManyBacklink(2, object.id): object.authors},
        getId: (Book object) => object.id,
        setId: (Book object, int id) {
          object.id = id;
        },
        objectToFB: (Book object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Book(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));
          InternalToManyAccess.setRelInfo(object.authors, store,
              RelInfo<Author>.toManyBacklink(2, object.id), store.box<Book>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Author] entity fields to define ObjectBox queries.
class Author_ {
  /// see [Author.id]
  static final id = QueryIntegerProperty<Author>(_entities[0].properties[0]);

  /// see [Author.name]
  static final name = QueryStringProperty<Author>(_entities[0].properties[1]);

  /// see [Author.books]
  static final books =
      QueryRelationToMany<Author, Book>(_entities[0].relations[0]);
}

/// [Book] entity fields to define ObjectBox queries.
class Book_ {
  /// see [Book.id]
  static final id = QueryIntegerProperty<Book>(_entities[1].properties[0]);

  /// see [Book.title]
  static final title = QueryStringProperty<Book>(_entities[1].properties[1]);
}
